// Ë∑ØÂæÑ: app/src/main/java/com/example/chatskill/ui/chat/components/MessageList.kt
// Êñá‰ª∂Âêç: MessageList.kt
// Êìç‰Ωú: „ÄêÂÆåÊï¥ÊõøÊç¢„Äë
package com.example.chatskill.ui.chat.components

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.chatskill.data.model.Message

@Composable
fun MessageList(
    messages: List<Message>,
    themeColor: Color,
    isLoading: Boolean = false,
    modifier: Modifier = Modifier
) {
    val listState = rememberLazyListState()

    // üîë Ëá™Âä®ÊªöÂä®Âà∞ÊúÄÊñ∞Ê∂àÊÅØÔºàÂåÖÊã¨ÈîÆÁõòÂçáÈôçÊó∂Ôºâ
    LaunchedEffect(messages.size) {
        if (messages.isNotEmpty()) {
            listState.animateScrollToItem(messages.size - 1)
        }
    }

    Box(modifier = modifier.fillMaxSize()) {
        if (messages.isEmpty() && !isLoading) {
            // Á©∫Áä∂ÊÄÅ
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(32.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                Text(
                    text = "üí¨",
                    fontSize = 64.sp
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "ÂºÄÂßãÂØπËØùÂêß",
                    color = Color.Gray,
                    fontSize = 18.sp
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "ËæìÂÖ•‰Ω†ÁöÑÁ¨¨‰∏ÄÊù°Ê∂àÊÅØ",
                    color = Color.LightGray,
                    fontSize = 14.sp
                )
            }
        } else {
            LazyColumn(
                state = listState,
                modifier = Modifier.fillMaxSize(),
                // üîë ÁªôÂ∫ïÈÉ®È¢ùÂ§ñÁ©∫Èó¥ÔºåÈò≤Ê≠¢Ë¢´ÈÅÆÊå°
                contentPadding = PaddingValues(
                    top = 8.dp,
                    bottom = 16.dp  // È¢ùÂ§ñÂ∫ïÈÉ®Á©∫Èó¥
                )
            ) {
                items(messages, key = { it.id }) { message ->
                    MessageItem(
                        message = message,
                        themeColor = themeColor
                    )
                }
                
                // Âä†ËΩΩÊåáÁ§∫Âô®
                if (isLoading) {
                    item {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            horizontalArrangement = Arrangement.Start
                        ) {
                            Box(
                                modifier = Modifier.size(40.dp),
                                contentAlignment = Alignment.Center
                            ) {
                                CircularProgressIndicator(
                                    modifier = Modifier.size(24.dp),
                                    color = themeColor,
                                    strokeWidth = 2.dp
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}